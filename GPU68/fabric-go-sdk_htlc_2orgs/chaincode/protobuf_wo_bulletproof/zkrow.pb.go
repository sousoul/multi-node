// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zkrow.proto

//package main;

package zkrow_package

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//zkrow represents a row in the public ledger
type Zkrow struct {
	Columns              map[string]*OrgColumn `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsValidBalCor        bool                  `protobuf:"varint,2,opt,name=isValidBalCor,proto3" json:"isValidBalCor,omitempty"`
	IsValidAsset         bool                  `protobuf:"varint,3,opt,name=isValidAsset,proto3" json:"isValidAsset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Zkrow) Reset()         { *m = Zkrow{} }
func (m *Zkrow) String() string { return proto.CompactTextString(m) }
func (*Zkrow) ProtoMessage()    {}
func (*Zkrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_3687e745eb88f81a, []int{0}
}

func (m *Zkrow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Zkrow.Unmarshal(m, b)
}
func (m *Zkrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Zkrow.Marshal(b, m, deterministic)
}
func (m *Zkrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Zkrow.Merge(m, src)
}
func (m *Zkrow) XXX_Size() int {
	return xxx_messageInfo_Zkrow.Size(m)
}
func (m *Zkrow) XXX_DiscardUnknown() {
	xxx_messageInfo_Zkrow.DiscardUnknown(m)
}

var xxx_messageInfo_Zkrow proto.InternalMessageInfo

func (m *Zkrow) GetColumns() map[string]*OrgColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Zkrow) GetIsValidBalCor() bool {
	if m != nil {
		return m.IsValidBalCor
	}
	return false
}

func (m *Zkrow) GetIsValidAsset() bool {
	if m != nil {
		return m.IsValidAsset
	}
	return false
}

// OrgColumn represents one organization
type OrgColumn struct {
	// transaction content
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	AuditToken []byte `protobuf:"bytes,2,opt,name=auditToken,proto3" json:"auditToken,omitempty"`
	// two step validation state
	IsValidBalCor bool `protobuf:"varint,3,opt,name=isValidBalCor,proto3" json:"isValidBalCor,omitempty"`
	IsValidAsset  bool `protobuf:"varint,4,opt,name=isValidAsset,proto3" json:"isValidAsset,omitempty"`
	// auxiliary data for proofs
	TokenPrime           []byte   `protobuf:"bytes,5,opt,name=TokenPrime,proto3" json:"TokenPrime,omitempty"`
	TokenDoublePrime     []byte   `protobuf:"bytes,6,opt,name=TokenDoublePrime,proto3" json:"TokenDoublePrime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrgColumn) Reset()         { *m = OrgColumn{} }
func (m *OrgColumn) String() string { return proto.CompactTextString(m) }
func (*OrgColumn) ProtoMessage()    {}
func (*OrgColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_3687e745eb88f81a, []int{1}
}

func (m *OrgColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrgColumn.Unmarshal(m, b)
}
func (m *OrgColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrgColumn.Marshal(b, m, deterministic)
}
func (m *OrgColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgColumn.Merge(m, src)
}
func (m *OrgColumn) XXX_Size() int {
	return xxx_messageInfo_OrgColumn.Size(m)
}
func (m *OrgColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgColumn.DiscardUnknown(m)
}

var xxx_messageInfo_OrgColumn proto.InternalMessageInfo

func (m *OrgColumn) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *OrgColumn) GetAuditToken() []byte {
	if m != nil {
		return m.AuditToken
	}
	return nil
}

func (m *OrgColumn) GetIsValidBalCor() bool {
	if m != nil {
		return m.IsValidBalCor
	}
	return false
}

func (m *OrgColumn) GetIsValidAsset() bool {
	if m != nil {
		return m.IsValidAsset
	}
	return false
}

func (m *OrgColumn) GetTokenPrime() []byte {
	if m != nil {
		return m.TokenPrime
	}
	return nil
}

func (m *OrgColumn) GetTokenDoublePrime() []byte {
	if m != nil {
		return m.TokenDoublePrime
	}
	return nil
}

func init() {
	proto.RegisterType((*Zkrow)(nil), "zkrow_package.zkrow")
	proto.RegisterMapType((map[string]*OrgColumn)(nil), "zkrow_package.zkrow.ColumnsEntry")
	proto.RegisterType((*OrgColumn)(nil), "zkrow_package.OrgColumn")
}

func init() { proto.RegisterFile("zkrow.proto", fileDescriptor_3687e745eb88f81a) }

var fileDescriptor_3687e745eb88f81a = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0xe5, 0x86, 0x16, 0x7a, 0x49, 0xa5, 0xca, 0x93, 0xc5, 0x80, 0x42, 0xc4, 0x10, 0x31,
	0x64, 0x28, 0x0b, 0x82, 0x09, 0x0a, 0x33, 0xc8, 0xaa, 0x58, 0x91, 0x9b, 0x5a, 0x55, 0x14, 0x3b,
	0xae, 0x1c, 0x07, 0x54, 0xde, 0x16, 0x89, 0x07, 0x41, 0x39, 0xf3, 0x27, 0x21, 0x0b, 0x9b, 0xef,
	0xbb, 0xcf, 0xf7, 0xf3, 0xc9, 0x10, 0xbe, 0x95, 0xd6, 0xbc, 0x66, 0x3b, 0x6b, 0x9c, 0xa1, 0x33,
	0x2c, 0x9e, 0x77, 0x22, 0x2f, 0xc5, 0x56, 0x26, 0x1f, 0x04, 0xc6, 0x48, 0xe8, 0x35, 0x1c, 0xe6,
	0x46, 0x35, 0xba, 0xaa, 0x19, 0x89, 0x83, 0x34, 0x5c, 0x9c, 0x66, 0x3d, 0xd5, 0x57, 0xd9, 0xd2,
	0x3b, 0xf7, 0x95, 0xb3, 0x7b, 0xfe, 0x7d, 0x83, 0x9e, 0xc1, 0xac, 0xa8, 0x9f, 0x84, 0x2a, 0x36,
	0xb7, 0x42, 0x2d, 0x8d, 0x65, 0xa3, 0x98, 0xa4, 0x47, 0xbc, 0x0f, 0x69, 0x02, 0xd1, 0x17, 0xb8,
	0xa9, 0x6b, 0xe9, 0x58, 0x80, 0x52, 0x8f, 0x1d, 0xaf, 0x20, 0xea, 0x46, 0xd0, 0x39, 0x04, 0xa5,
	0xdc, 0x33, 0x12, 0x93, 0x74, 0xca, 0xdb, 0x23, 0xcd, 0x60, 0xfc, 0x22, 0x54, 0x23, 0x31, 0x23,
	0x5c, 0xb0, 0x3f, 0xcf, 0x7c, 0xb0, 0x5b, 0x3f, 0x80, 0x7b, 0xed, 0x6a, 0x74, 0x49, 0x92, 0x77,
	0x02, 0xd3, 0x9f, 0x06, 0x3d, 0x01, 0xc8, 0x8d, 0xd6, 0x85, 0xd3, 0xb2, 0x72, 0x38, 0x3a, 0xe2,
	0x1d, 0xd2, 0xf6, 0x45, 0xb3, 0x29, 0xdc, 0xca, 0x94, 0xb2, 0xc2, 0x98, 0x88, 0x77, 0xc8, 0x70,
	0xdb, 0xe0, 0x3f, 0xdb, 0x1e, 0x0c, 0xb7, 0x6d, 0x93, 0x70, 0xe4, 0xa3, 0x2d, 0xb4, 0x64, 0x63,
	0x9f, 0xf4, 0x4b, 0xe8, 0x39, 0xcc, 0xb1, 0xba, 0x33, 0xcd, 0x5a, 0x49, 0x6f, 0x4d, 0xd0, 0x1a,
	0xf0, 0xf5, 0x04, 0x3f, 0xf8, 0xe2, 0x33, 0x00, 0x00, 0xff, 0xff, 0x77, 0xf4, 0x47, 0x53, 0xef,
	0x01, 0x00, 0x00,
}
